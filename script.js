document.addEventListener('DOMContentLoaded', () => {
    const card = document.getElementById('card');
    const cardImage = document.getElementById('card-image');
    const cardName = document.getElementById('card-name');
    const cardDescription = document.getElementById('card-description');
    const noBtn = document.getElementById('no-btn');
    const yesBtn = document.getElementById('yes-btn');
    const resultMessage = document.getElementById('result-message');

    // D·ªØ li·ªáu c√°c "ƒë·ªëi t∆∞·ª£ng" ƒë·ªÉ qu·∫πt
    const profiles = [
        {
            name: "H·ªìng Nhung",
            description: "C√¥ g√°i nƒÉng ƒë·ªông, th√≠ch c√† ph√™ v√† nh·ªØng chuy·∫øn ƒëi",
            image: "images/image1.jpg"
        },
        {
            name: "Minh Anh",
            description: "Y√™u m√®o, th√≠ch ƒë·ªçc s√°ch v√† kh√°m ph√° ·∫©m th·ª±c",
            image: "images/image2.jpg"
        },
        {
            name: "Lan H∆∞∆°ng",
            description: "ƒêam m√™ ngh·ªá thu·∫≠t, th√≠ch v·∫Ω v√† nghe nh·∫°c indie",
            image: "images/image3.jpg"
        },
        {
            name: "Ng·ªçc Mai",
            description: "Th√≠ch th·ªÉ thao, ƒë·∫∑c bi·ªát l√† ch·∫°y b·ªô v√† b∆°i l·ªôi",
            image: "images/image4.jpg"
        },
        {
            name: "Th√πy Linh",
            description: "Nhi·ªát t√¨nh, h√†i h∆∞·ªõc, th√≠ch k·ªÉ chuy·ªán c∆∞·ªùi",
            image: "images/image5.jpg"
        },
        // Th√™m nhi·ªÅu profile kh√°c c·ªßa nh·ªØng c√¥ g√°i ƒë√°ng y√™u v√†o ƒë√¢y nh√©!
        // VD:
        // {
        //     name: "T√™n Ng∆∞·ªùi Kh√°c",
        //     description: "M√¥ t·∫£ v·ªÅ ng∆∞·ªùi kh√°c",
        //     image: "images/image6.jpg"
        // }
    ];

    let currentProfileIndex = 0;
    let startX = 0;
    let startY = 0;
    let isDragging = false;

    // H√†m t·∫£i profile m·ªõi
    function loadProfile() {
        if (currentProfileIndex < profiles.length) {
            const profile = profiles[currentProfileIndex];
            cardImage.src = profile.image;
            cardName.textContent = profile.name;
            cardDescription.textContent = profile.description;
            card.style.transform = 'translate(0, 0) rotate(0deg)'; // ƒê·∫∑t l·∫°i v·ªã tr√≠ th·∫ª
            card.style.opacity = 1; // ƒê·∫£m b·∫£o th·∫ª hi·ªÉn th·ªã
            card.style.zIndex = profiles.length - currentProfileIndex; // ƒê·ªÉ th·∫ª m·ªõi ·ªü tr√™n
            resultMessage.classList.remove('show', 'like', 'dislike'); // ·∫®n tin nh·∫Øn k·∫øt qu·∫£
        } else {
            // Khi h·∫øt profile ƒë·ªÉ qu·∫πt
            card.style.display = 'none';
            resultMessage.textContent = "H·∫øt ng∆∞·ªùi ƒë·ªÉ qu·∫πt r·ªìi b√© ∆°i! ƒê·ªÉ anh t√¨m th√™m cho nh√© üòò";
            resultMessage.classList.add('show', 'like'); // Hi·ªÉn th·ªã tin nh·∫Øn k·∫øt th√∫c game
            noBtn.disabled = true;
            yesBtn.disabled = true;
        }
    }

    // H√†m x·ª≠ l√Ω khi qu·∫πt/nh·∫•n n√∫t
    function handleSwipe(direction) {
        let message = '';
        let messageClass = '';

        if (direction === 'yes') {
            card.classList.add('right');
            message = `√î l√† la! Em th√≠ch ${cardName.textContent} n√®! ‚ù§Ô∏è`;
            messageClass = 'like';
        } else {
            card.classList.add('left');
            message = `Th√¥i next ƒëi n√® ${cardName.textContent}! üôÖ‚Äç‚ôÄÔ∏è`;
            messageClass = 'dislike';
        }

        resultMessage.textContent = message;
        resultMessage.classList.add('show', messageClass);

        // Ch·ªù animation ho√†n th√†nh r·ªìi m·ªõi t·∫£i profile m·ªõi
        setTimeout(() => {
            currentProfileIndex++;
            card.classList.remove('left', 'right'); // X√≥a class ƒë·ªÉ reset cho l·∫ßn sau
            loadProfile();
        }, 300); // Th·ªùi gian tr√πng v·ªõi transition trong CSS
    }

    // --- X·ª≠ l√Ω k√©o th·∫£ (Swipe) ---
    card.addEventListener('mousedown', (e) => {
        isDragging = true;
        startX = e.clientX;
        startY = e.clientY;
        card.classList.add('moving');
    });

    card.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        e.preventDefault(); // NgƒÉn cu·ªôn trang
        const deltaX = e.clientX - startX;
        const deltaY = e.clientY - startY;

        card.style.transform = `translate(${deltaX}px, ${deltaY}px) rotate(${deltaX / 20}deg)`;
        card.style.opacity = 1 - Math.abs(deltaX) / window.innerWidth; // Gi·∫£m ƒë·ªô m·ªù khi k√©o ra xa
    });

    card.addEventListener('mouseup', (e) => {
        if (!isDragging) return;
        isDragging = false;
        card.classList.remove('moving');

        const deltaX = e.clientX - startX;
        const threshold = window.innerWidth / 4; // Ng∆∞·ª°ng ƒë·ªÉ x√°c ƒë·ªãnh qu·∫πt

        if (deltaX > threshold) {
            handleSwipe('yes');
        } else if (deltaX < -threshold) {
            handleSwipe('no');
        } else {
            // Quay l·∫°i v·ªã tr√≠ ban ƒë·∫ßu n·∫øu ch∆∞a ƒë·ªß ng∆∞·ª°ng
            card.style.transform = 'translate(0, 0) rotate(0deg)';
            card.style.opacity = 1;
        }
    });

    // --- X·ª≠ l√Ω s·ª± ki·ªán ch·∫°m (Touch for mobile) ---
    card.addEventListener('touchstart', (e) => {
        isDragging = true;
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        card.classList.add('moving');
    });

    card.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        e.preventDefault(); // NgƒÉn cu·ªôn trang
        const deltaX = e.touches[0].clientX - startX;
        const deltaY = e.touches[0].clientY - startY;

        card.style.transform = `translate(${deltaX}px, ${deltaY}px) rotate(${deltaX / 20}deg)`;
        card.style.opacity = 1 - Math.abs(deltaX) / window.innerWidth;
    });

    card.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        isDragging = false;
        card.classList.remove('moving');

        const deltaX = e.changedTouches[0].clientX - startX;
        const threshold = window.innerWidth / 4;

        if (deltaX > threshold) {
            handleSwipe('yes');
        } else if (deltaX < -threshold) {
            handleSwipe('no');
        } else {
            card.style.transform = 'translate(0, 0) rotate(0deg)';
            card.style.opacity = 1;
        }
    });


    // --- X·ª≠ l√Ω n√∫t b·∫•m ---
    noBtn.addEventListener('click', () => {
        handleSwipe('no');
    });

    yesBtn.addEventListener('click', () => {
        handleSwipe('yes');
    });

    // T·∫£i profile ƒë·∫ßu ti√™n khi trang ƒë∆∞·ª£c load
    loadProfile();
});
